version: 2.1

orbs:
  slack: circleci/slack@4.12.1
commands:
  install_awscli:
    description: Install awscli.
    steps:
      - run:
          name: Install awscli.
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install ansible.
    steps:
      - run:
          name: Install ansible.
          command: |
            sudo apt-add-repository ppa:ansible/ansible
            sudo apt update
            sudo apt install ansible
  install_nodejs:
    description: Install nodejs.
    steps:
      - run:
          name: Install nodejs.
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install nodejs -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID0:0:7}
    steps:
      - run:
          name: Delete S3
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID0:0:7} --recursive
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID0:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID0:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID0:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |           
            SUCCESS = $(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: bucket1
          template: basic_success_1

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: bucket1
          template: basic_success_1

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys: [frontend-build]
      - run: 
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: bucket1
          template: basic_success_1          
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: bucket1
          template: basic_success_1    
    
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: bucket1
          template: basic_success_1
  
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          name: Restore cache
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1
      - slack/notify:
          event: pass
          channel: bucket1
          template: basic_success_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar, gzip, git
          command: yum -y install tar gzip git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID0:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID0:0:7}"
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID0:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID0:0:7}"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID0:0:7}" \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text >> ~/project/.circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["27:b8:14:d3:6d:d2:41:5b:23:2d:3b:f7:59:96:e1:c1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION= $TYPEORM_CONNECTION >> "backend/.env"
            echo AWS_ACCESS_KEY_ID= $AWS_ACCESS_KEY_ID >> "backend/.env"
            echo AWS_DEFAULT_REGION= $AWS_DEFAULT_REGION >> "backend/.env"
            echo AWS_SECRET_ACCESS_KEY= $AWS_SECRET_ACCESS_KEY >> "backend/.env"
            echo SLACK_ACCESS_TOKEN= $SLACK_ACCESS_TOKEN >> "backend/.env"
            echo SLACK_DEFAULT_CHANEL= $SLACK_DEFAULT_CHANEL > "backend/.env"
            echo TYPEORM_DATABASE= $TYPEORM_DATABASE >> "backend/.env"
            echo TYPEORM_ENTITIES= $TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_HOST= $TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_MIGRATIONS= $TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR= $TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_PASSWORD= $TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_PORT= $TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME= $TYPEORM_USERNAME >> "backend/.env"
            echo AWS_SESION_TOKEN= $AWS_SESION_TOKEN >> "backend/.env"
            cat backend/.env

            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - restore_cache:
          name: Restore cache
          keys: backend-build
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed seccessfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/WsQdPf2TjArdBLF3pQPr9T/migration_${CIRCLE_WORKFLOW_ID0:0:7} -d '1'
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: python:alpine3.16
    steps:
      - checkout
      - attach workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID0:0:7}" \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            eport NODE_ENV=production
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID0:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["27:b8:14:d3:6d:d2:41:5b:23:2d:3b:f7:59:96:e1:c1"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            ansible-playbook deploy-backend.yml -i inventory
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            export URL_BACKEND=""
            export URL_FRONTEND=""
      - run:
          name: Backend smoke test.
          command: |
            if curl -s --head ${URL_BACKEND}
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s --head ${URL_FRONTEND}
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          channel: bucket1
          template: basic_fail_1

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # aws cloudformation delete-stack --stack-name ${OldWorkflowID}
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]